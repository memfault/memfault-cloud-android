<HTML>
<HEAD>
<meta charset="UTF-8">
<title>ChunkSender - sdk</title>
<link rel="stylesheet" href="../../../style.css">
</HEAD>
<BODY>
<a href="../../index.html">sdk</a>&nbsp;/&nbsp;<a href="../index.html">com.memfault.cloud.sdk</a>&nbsp;/&nbsp;<a href="./index.html">ChunkSender</a><br/>
<br/>
<h1>ChunkSender</h1>
<code><span class="keyword">class </span><span class="identifier">ChunkSender</span></code>
<p>Send chunks for a given device to Memfault's web services.</p>
<p>One chunk sender must be created for each device; all chunk senders can then share
the same <a href="../-memfault-cloud/index.html">MemfaultCloud</a> instance.</p>
<h2>Initialization</h2>
<p>Use the <a href="-builder/index.html">Builder</a> to instantiate a <a href="./index.html">ChunkSender</a>:</p>
<p>Kotlin:</p>
<pre><code class="lang-kotlin">val chunkSender = ChunkSender.Builder()
  .setMemfaultCloud(memfaultCloud)
  .setDeviceSerialNumber(deviceSerial)
  .build()
</code></pre>
<p>Java:</p>
<pre><code class="lang-java">final ChunkSender chunkSender = new ChunkSender.Builder()
  .setMemfaultCloud(memfaultCloud)
  .setDeviceSerialNumber(deviceSerial)
  .build()
</code></pre>
<h2>Persistent Queuing</h2>
<p>By default, the <a href="./index.html">ChunkSender</a>'s queue lives in memory. If the application is closed or
crashes with chunks un-sent, they will be lost.</p>
<p>If this is an issue for your application, you can provide the <a href="./index.html">ChunkSender</a> with a
<a href="../-chunk-queue/index.html">ChunkQueue</a> that is persistent.</p>
<h3>Types</h3>
<table>
<tbody>
<tr>
<td>
<h4><a href="-builder/index.html">Builder</a></h4>
</td>
<td>
<p>Build a <a href="./index.html">ChunkSender</a> instance for a given device.</p>
<code><span class="keyword">class </span><span class="identifier">Builder</span></code></td>
</tr>
</tbody>
</table>
<h3>Functions</h3>
<table>
<tbody>
<tr>
<td>
<h4><a href="add-chunks.html">addChunks</a></h4>
</td>
<td>
<p>Enqueue the chunks for the given device.</p>
<code><span class="keyword">fun </span><span class="identifier">addChunks</span><span class="symbol">(</span><span class="identifier" id="com.memfault.cloud.sdk.ChunkSender$addChunks(kotlin.collections.List((kotlin.ByteArray)))/chunks">chunks</span><span class="symbol">:</span>&nbsp;<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html"><span class="identifier">List</span></a><span class="symbol">&lt;</span><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-byte-array/index.html"><span class="identifier">ByteArray</span></a><span class="symbol">&gt;</span><span class="symbol">)</span><span class="symbol">: </span><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html"><span class="identifier">Boolean</span></a></code></td>
</tr>
<tr>
<td>
<h4><a href="send.html">send</a></h4>
</td>
<td>
<p>Attempt to drain all chunks for the given device.</p>
<code><span class="keyword">fun </span><span class="identifier">send</span><span class="symbol">(</span><span class="identifier" id="com.memfault.cloud.sdk.ChunkSender$send(com.memfault.cloud.sdk.SendChunksCallback)/callback">callback</span><span class="symbol">:</span>&nbsp;<a href="../-send-chunks-callback/index.html"><span class="identifier">SendChunksCallback</span></a><span class="symbol">)</span><span class="symbol">: </span><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html"><span class="identifier">Unit</span></a></code></td>
</tr>
</tbody>
</table>
</BODY>
</HTML>
